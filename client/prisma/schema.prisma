// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  // A company can have multiple rooms.
  rooms       Room[]
  // Optionally, a company can have users directly (for reference).
  users       User[]   @relation("CompanyUsers")
  createdAt   DateTime @default(now())
}

model Room {
  id          String   @id @default(uuid())
  name        String
  description String?
  // Each room belongs to a company.
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  // Users present in the room.
  users       User[]
  // (Optional) Messages for chat functionality.
  // messages    Message[]
  createdAt   DateTime @default(now())
}

model Role {
  id         String   @id @default(uuid())
  name       String   @unique         // e.g., "Employee", "Manager", "HR"
  spriteUrl  String?                   // e.g., path/URL to the character image
  users      User[]
  createdAt  DateTime @default(now())
}

model User {
  id        String   @id @default(uuid())
  // Unique account identifier - you can treat this as the username.
  account   String   @unique
  name      String
  email     String   @unique           // or use email as the unique identifier
  password  String
  // Coordinates for positioning in the 2D space
  posX      Float    @default(0)
  posY      Float    @default(0)
  // The room the user is in.
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?
  // The company the user belongs to.
  company   Company? @relation("CompanyUsers", fields: [companyId], references: [id])
  companyId String?
  // The role assigned to the user.
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    String?
  // Userâ€™s sent messages (optional)
  // messages  Message[]
  createdAt DateTime @default(now())
}

// model Message {
//   id        String   @id @default(uuid())
//   content   String
//   // The sender of the message.
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   // The room where the message was sent.
//   room      Room     @relation(fields: [roomId], references: [id])
//   roomId    String
//   createdAt DateTime @default(now())
// }
