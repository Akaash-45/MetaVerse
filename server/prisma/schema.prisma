//schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        String   @id @default(uuid()) @unique
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  
  // Relationships
  spaceId   String?  // FK to current space (if any)
  space     Space?   @relation("ActiveUsers", fields: [spaceId], references: [id])
  roomId    String?  // FK to current room (if any)
  room      Room?    @relation(fields: [roomId], references: [id])
  adminSpaces Space[] @relation("SpaceAdmin")
  accessibleSpaces Space[] @relation("AccessUsers")
}

model Space {
  id          String   @id @default(uuid()) @unique
  name        String
  createdAt   DateTime @default(now())
  
  // Admin relationship
  adminId     String
  admin       User     @relation("SpaceAdmin", fields: [adminId], references: [id])
  rooms       Room[]
  
  // Users in the space
  activeUsers User[]   @relation("ActiveUsers")
  accessUsers User[]   @relation("AccessUsers")
}

model Room {
  id        String   @id @default(uuid()) @unique
  name      String
  createdAt DateTime @default(now())
  
  // Space relationship
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  
  // Users currently in this room
  users     User[]
  
  // Assets in this room
  assets    Asset[]  // Many-to-many relationship with Asset
  isDefault Boolean  @default(false)
  sizeX     Int      @default(800) 
  sizeY     Int      @default(600) 
}

model Asset {
  id     String @id @default(uuid()) @unique
  path   String 
  posx   Int
  posy   Int
  
  // Basically an asset can exist in multiple rooms
  rooms  Room[] // Many-to-many relationship with Room
}