//schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        String   @id @unique @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relationships
  spaceId          String? // FK to current space (if any)
  space            Space?  @relation("ActiveUsers", fields: [spaceId], references: [id])
  roomId           String? // FK to current room (if any)
  room             Room?   @relation(fields: [roomId], references: [id])
  adminSpaces      Space[] @relation("SpaceAdmin")
  accessibleSpaces Space[] @relation("AccessUsers")
}

model Space {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())

  // Admin relationship
  adminId String
  admin   User   @relation("SpaceAdmin", fields: [adminId], references: [id])
  rooms   Room[]

  // Users in the space
  activeUsers User[] @relation("ActiveUsers")
  accessUsers User[] @relation("AccessUsers")
}

// New Model: Represents a type or template for a room
model RoomType {
  id           String   @id @unique @default(uuid())
  name         String   @unique // e.g., "Conference Hall", "Lounge"
  description  String?
  defaultSizeX Int      @default(800)
  defaultSizeY Int      @default(600)
  createdAt    DateTime @default(now())

  // Assets defined for this room type (template)
  assets RoomTypeAsset[]

  // Rooms created using this type
  rooms Room[]
}

// New Model: Defines which assets belong to a RoomType and their default positions
model RoomTypeAsset {
  id          String   @id @unique @default(uuid())
  defaultPosX Int
  defaultPosY Int
  createdAt   DateTime @default(now())

  // Relation to RoomType
  roomTypeId String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  // Relation to Asset
  assetId String
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([roomTypeId, assetId]) // Ensure an asset is only added once per room type
}

model Room {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())

  // Space relationship
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  // Users currently in this room
  users User[]

  // Link to the RoomType (defines layout, default assets, size)
  roomTypeId String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
  isDefault  Boolean  @default(false)
}

model Asset {
  id   String  @id @unique @default(uuid())
  path String // Path to the asset resource (e.g., image URL, model file)
  name String? // Optional name for the asset

  // Link to RoomTypeAsset definitions
  roomTypeAssets RoomTypeAsset[]
}
